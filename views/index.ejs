
<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    <link rel="stylesheet" href="/static/index.css">
    <script type="text/javascript" src="/static/Table.js" ></script>   
    <script type="module" src="/javascript/database.mjs"></script>
  </head>
    <div class="tableBox">
      <h2>      Games     </h2>
      <form id="form" method="POST">
        <h4>Filters:</h4>
        <label for="date">Date (e.g., "2024-01-01 to 2024-01-31"): </label>
        <input type="text" name="date" id="date">
        <label for="team">Team: </label>
        <input type="text" name="team" id="team">
        <label for="stadium">Stadium: </label>
        <input type="text" name="stadium" id="stadium">
        <input class="button-2" type="submit" value="Submit">
      </form>
      <div> 
      <script>
      document.addEventListener("DOMContentLoaded", function () {
        async function fetchGameData() {
    const userInputDate = document.getElementById("date").value.trim();
    const userInputTeam = document.getElementById("team").value.trim();
    const userInputStadium = document.getElementById("stadium").value.trim();

    // Parse date input for a range (e.g., "2024-01-01 to 2024-01-31")
    let dateRange = {};
    if (userInputDate.includes("to")) {
        const [startDate, endDate] = userInputDate.split("to").map(date => date.trim());
        dateRange.startDate = startDate;
        dateRange.endDate = endDate;
    } else if (userInputDate) {
        dateRange.startDate = userInputDate;
        dateRange.endDate = userInputDate; // Single date treated as start and end
    }

    try {
        // Construct query parameters based on input
        const queryParams = new URLSearchParams();
        if (dateRange.startDate) queryParams.append("startDate", dateRange.startDate);
        if (dateRange.endDate) queryParams.append("endDate", dateRange.endDate);
        if (userInputTeam) queryParams.append("team", userInputTeam);
        if (userInputStadium) queryParams.append("stadium", userInputStadium);

        const response = await fetch(`http://localhost:4000/games?${queryParams.toString()}`);

        if (!response.ok) {
            throw new Error(`Error: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        // Find the game data container
        const gameDataContainer = document.getElementById("myGrid");

        if (gameDataContainer) {
            gameDataContainer.innerHTML = ""; // Clear previous results

            // Create a table element
            const table = document.createElement("table");
            table.style.width = "100%";
            table.style.borderCollapse = "collapse";

            // Create table header
            const header = document.createElement("thead");
            header.innerHTML = `
                <tr>
                    <th>Date</th>
                    <th>Team 1</th>
                    <th>Team 2</th>
                    <th>Stadium</th>
                    <th>Score 1</th>
                    <th>Score 2</th>
                    <th>Winner</th>
                    <th>Tickets</th>
                </tr>
            `;
            table.appendChild(header);

            // Create table body
            const tbody = document.createElement("tbody");

            if (data.length > 0) {
                data.forEach(game => {
                    // Ensure the game.GameDate is a valid date
                    const gameDate = new Date(game.GameDate);
                    const formattedDate = isNaN(gameDate) ? "Invalid Date" : gameDate.toLocaleDateString('en-US');

                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>${game.Team1}</td>
                        <td>${game.Team2}</td>
                        <td>${game.Stadium}</td>
                        <td>${game.Score1}</td>
                        <td>${game.Score2}</td>
                        <td>${game.Winner}</td>
                        <td>${"Tickets"}</td>
                    `;
                    tbody.appendChild(row);
                });
            } else {
                const noResultsRow = document.createElement("tr");
                noResultsRow.innerHTML = "<td colspan='7'>No games found with the specified filters.</td>";
                tbody.appendChild(noResultsRow);
            }

            table.appendChild(tbody);
            gameDataContainer.appendChild(table);
        } else {
            console.error("Could not find element with ID 'myGrid'");
        }
    } catch (error) {
        console.error("Error fetching games:", error);
        const gameDataContainer = document.getElementById("myGrid");
        if (gameDataContainer) {
            gameDataContainer.innerHTML = `<p>Error fetching data: ${error.message}</p>`;
        }
    }
}


// Attach the fetch function to the form submit event
document.getElementById("form").addEventListener("submit", function(event) {
    event.preventDefault(); // Prevent default form submission
    fetchGameData();
  });
});

    </script>
    </div>



      <div id="myGrid" class="ag-theme-quartz" style="height: 500px; color:black"></div>
    </div>
    <div class="tableBox">
    <h2>Airports</h2>
      <form id="form2">
        <h4>Filters:</h4>
        <label for="dist">Max distance from stadium: </label>
        <input type="text" name="dist" id="dist">
        <input class="button-2" type="submit" value="Submit">
      </form>
    </div>
    <div class="tableBox">
      <h2>Map</h2>
    </div>
</html>